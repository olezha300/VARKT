import numpy as np
import matplotlib.pyplot as plt

# Импортируем библиотеки numpy и matplotlib.pyplot для работы с массивами и графиками соответственно.

# Функция, описывающая систему дифференциальных уравнений
def rocket_equations(t, y):
    # Параметры модели
    g = 9.8  # Ускорение свободного падения (м/с^2)
    m0 = 1000  # Масса ракеты без топлива (кг)
    v_e = 2000  # Скорость истечения газов (м/с)
    m_dot = 20  # Скорость выброса топлива (кг/с)

    # Текущая масса ракеты
    m = m0 - m_dot * t

    # Скорость изменения скорости и высоты
    dy_dt = [y[1], (1 / m) * (m_dot * v_e - m * g)]
    return dy_dt

# Объявляем функцию rocket_equations, которая описывает систему дифференциальных уравнений для модели ракеты. Внутри функции задаются параметры модели: 
# g - ускорение свободного падения в м/с^2
# m0 - масса ракеты без топлива в кг
# v_e - скорость истечения газов в м/с
# m_dot - скорость выброса топлива в кг/с

# Внутри функции вычисляется текущая масса ракеты, зависящая от времени t.
# Затем вычисляются скорость изменения скорости и высоты ракеты и возвращаются в виде списка [dy_dt[0], dy_dt[1]].

# Начальные условия
t0 = 0  # Начальное время
y0 = [0, 0]  # Начальное состояние (высота и скорость)

# Задаем начальные условия: начальное время t0 равно 0 секундам, начальное состояние ракеты задается списком [0, 0], где первый элемент - высота, а второй элемент - скорость.

# Шаг интегрирования
dt = 0.1

# Задаем шаг интегрирования dt. Это величина времени, на которую мы будем делать "шаг" при решении системы дифференциальных уравнений.

# Число шагов
num_steps = int(50 / dt)

# Вычисляем число шагов, необходимых для достижения времени 50 сек. Для этого делим 50 на шаг интегрирования dt и приводим результат к целому числу с помощью функции int().

# Массивы для хранения времени, высоты и скорости
t = np.zeros(num_steps + 1)
h = np.zeros(num_steps + 1)
v = np.zeros(num_steps + 1)

# Создаем массивы t, h и v, которые будут содержать значения времени, высоты и скорости соответственно. 
# Эти массивы инициализированы нулями и имеют длину num_steps + 1.

# Задаем начальные значения
t[0] = t0
h[0] = y0[0]
v[0] = y0[1]

# Записываем начальные значения в соответствующие элементы массивов t, h и v.

# Цикл интегрирования, решаем систему методом Эйлера
for i in range(num_steps):
    t[i+1] = t[i] + dt
    dy_dt = rocket_equations(t[i], [h[i], v[i]])
    h[i+1] = h[i] + dt * dy_dt[0]
    v[i+1] = v[i] + dt * dy_dt[1]

# В цикле производим интегрирование системы дифференциальных уравнений с использованием метода Эйлера.
# На каждой итерации вычисляем следующие значения времени, используя формулу t[i+1] = t[i] + dt.
# Затем вычисляем значения скорости изменения высоты и скорости, используя функцию rocket_equations.
# Полученные значения используются для вычисления следующих значений высоты и скорости с помощью формул h[i+1] = h[i] + dt * dy_dt[0] и v[i+1] = v[i] + dt * dy_dt[1].

# График зависимости скорости от времени
plt.plot(t, v)
plt.xlabel('Время (сек)')
plt.ylabel('Скорость (м/с)')
plt.title('Зависимость скорости от времени')
plt.grid(True)
plt.show()

# Строим график зависимости скорости от времени, используя функцию plot из библиотеки matplotlib.pyplot.
# На графике ось X отображает время в секундах, а ось Y - скорость в м/с.
# Устанавливаем подписи осей и заголовок графика с помощью функций xlabel, ylabel и title соответственно.
# Также включаем сетку на графике с помощью функции grid(True).
# И, наконец, отображаем график с помощью функции show.

# График зависимости высоты от времени
plt.plot(t, h)
plt.xlabel('Время (сек)')
plt.ylabel('Высота (м)')
plt.title('Зависимость высоты от времени')
plt.grid(True)
plt.show()

# Строим график зависимости высоты от времени, аналогичным образом как и предыдущий график.
# На графике ось X отображает время в секундах, а ось Y - высоту в метрах.
